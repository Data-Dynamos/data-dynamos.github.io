"use strict";(self.webpackChunkdata_dynamos_github_io=self.webpackChunkdata_dynamos_github_io||[]).push([[4022],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(a),h=r,m=c["".concat(i,".").concat(h)]||c[h]||p[h]||l;return a?n.createElement(m,o(o({ref:t},d),{},{components:a})):n.createElement(m,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},2745:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const l={sidebar_position:2},o="DBT Local Setup",s={unversionedId:"data-transformation/data-build-tool/dbt-local-setup",id:"data-transformation/data-build-tool/dbt-local-setup",title:"DBT Local Setup",description:"There are two ways to setup and run the code in this repository:",source:"@site/docs/data-transformation/data-build-tool/dbt-local-setup.mdx",sourceDirName:"data-transformation/data-build-tool",slug:"/data-transformation/data-build-tool/dbt-local-setup",permalink:"/docs/data-transformation/data-build-tool/dbt-local-setup",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/data-transformation/data-build-tool/dbt-local-setup.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction Data Build Tool",permalink:"/docs/data-transformation/data-build-tool/Introduction-data-build-tool"},next:{title:"What are dbt models ?",permalink:"/docs/data-transformation/data-build-tool/what-dbt-model"}},i={},u=[{value:"Setup Directly on the Machine",id:"setup-directly-on-the-machine",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Install Pyenv v2.3.22",id:"install-pyenv-v2322",level:4},{value:"Load pyenv automatically",id:"load-pyenv-automatically",level:5},{value:"For bash",id:"for-bash",level:6},{value:"For Zsh",id:"for-zsh",level:6},{value:"Install Python 3.8.16",id:"install-python-3816",level:4},{value:"Install Poetry 1.5.1",id:"install-poetry-151",level:4},{value:"Add Poetry bin directory to PATH",id:"add-poetry-bin-directory-to-path",level:5},{value:"For bash:",id:"for-bash-1",level:6},{value:"For Zsh:",id:"for-zsh-1",level:6},{value:"Usage",id:"usage",level:3},{value:"Create virtualenv and Install Dependencies",id:"create-virtualenv-and-install-dependencies",level:4},{value:"Data Transformations",id:"data-transformations",level:4},{value:"Setup Using Docker",id:"setup-using-docker",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Usage",id:"usage-1",level:3},{value:"Data Transformations",id:"data-transformations-1",level:4}],d={toc:u},c="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dbt-local-setup"},"DBT Local Setup"),(0,r.kt)("p",null,"There are two ways to setup and run the code in this repository:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#setup-directly-on-the-machine"},"Setup Directly on the Machine"),": Install all the Software directly on your machine and run the code."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#setup-using-docker"},"Setup Using Docker"),": Use a pre-built Docker image containing all the Software already and run the code inside Docker container.")),(0,r.kt)("h2",{id:"setup-directly-on-the-machine"},"Setup Directly on the Machine"),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pyenv"),(0,r.kt)("li",{parentName:"ul"},"Python"),(0,r.kt)("li",{parentName:"ul"},"Poetry")),(0,r.kt)("h4",{id:"install-pyenv-v2322"},"Install Pyenv v2.3.22"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl https://pyenv.run | PYENV_GIT_TAG=v2.3.22 bash\n")),(0,r.kt)("h5",{id:"load-pyenv-automatically"},"Load pyenv automatically"),(0,r.kt)("h6",{id:"for-bash"},"For bash"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo \'export PYENV_ROOT="$HOME/.pyenv"\' >> ~/.bashrc\necho \'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"\' >> ~/.bashrc\necho \'eval "$(pyenv init -)"\' >> ~/.bashrc\nexec "$SHELL"\n')),(0,r.kt)("h6",{id:"for-zsh"},"For Zsh"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo \'export PYENV_ROOT="$HOME/.pyenv"\' >> ~/.zshrc\necho \'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"\' >> ~/.zshrc\necho \'eval "$(pyenv init -)"\' >> ~/.zshrc\nexec "$SHELL"\n')),(0,r.kt)("p",null,"If you are using shells other than bash or Zsh refer: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv"},"https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv")),(0,r.kt)("h4",{id:"install-python-3816"},"Install Python 3.8.16"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pyenv --version\npyenv install 3.8.16\npyenv versions # should list Python 3.8.16 version\n")),(0,r.kt)("h4",{id:"install-poetry-151"},"Install Poetry 1.5.1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.5.1 python3 -\n")),(0,r.kt)("h5",{id:"add-poetry-bin-directory-to-path"},"Add Poetry bin directory to PATH"),(0,r.kt)("h6",{id:"for-bash-1"},"For bash:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo \'export PATH="$HOME/.local/bin/:$PATH"\' >> ~/.bashrc\nexec "$SHELL"\n')),(0,r.kt)("h6",{id:"for-zsh-1"},"For Zsh:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'echo \'export PATH="$HOME/.local/bin/:$PATH"\' >> ~/.zshrc\nexec "$SHELL"\n')),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("h4",{id:"create-virtualenv-and-install-dependencies"},"Create virtualenv and Install Dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"# setup virtualenv and install the dependencies\npoetry install\n\n# run a command inside the virtualenv\npoetry run dbt --version\n\n# start a virtualenv shell and run commands inside it\npoetry shell\ndbt --version\n\n# install dbt packages\ncd data_transformation\ndbt deps\n")),(0,r.kt)("h4",{id:"data-transformations"},"Data Transformations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"poetry shell\n\nexport SNOWFLAKE_ACCOUNT='<your-snowflake-account-name>'\nexport SNOWFLAKE_DATABASE='<your-database-name>'\nexport SNOWFLAKE_USER='<your-user-name>'\nexport SNOWFLAKE_PASSWORD='<your-password>'\n\ncd data_transformation\ndbt debug # should connect to snowflake successfully\n")),(0,r.kt)("h2",{id:"setup-using-docker"},"Setup Using Docker"),(0,r.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Docker")),(0,r.kt)("h3",{id:"usage-1"},"Usage"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," The code will be mounted inside the container so whatever changes you make in your local machine will be synced to the container.")),(0,r.kt)("h4",{id:"data-transformations-1"},"Data Transformations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start the container")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --rm -it -v $PWD:/opt/data_dynamos_exercise quay.io/data-dynamos/data_dynamos_exercise bash\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run the code inside the container")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"export SNOWFLAKE_ACCOUNT='<your-snowflake-account-name>'\nexport SNOWFLAKE_DATABASE='<your-database-name>'\nexport SNOWFLAKE_USER='<your-user-name>'\nexport SNOWFLAKE_PASSWORD='<your-password>'\n\ncd data_transformation\ndbt debug # should connect to snowflake successfully\n")))}p.isMDXComponent=!0}}]);